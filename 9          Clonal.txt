import numpy as np

# Define the objective function (fitness function)
def objective_function(x):
    return np.sum(x**2)

# Clonal Selection Algorithm with enhancements
def clonal_selection_algorithm(num_antibodies, num_dimensions, search_space,
                               num_generations, num_clones, fitness_penalty, mutation_rate):

    # Initialize antibodies within the search space
    antibodies = np.random.uniform(search_space[:, 0], search_space[:, 1], size=(num_antibodies, num_dimensions))

    for generation in range(num_generations):
        # Evaluate fitness
        fitness = np.array([objective_function(antibody) for antibody in antibodies])

        # Calculate number of clones (ensure at least 1)
        clone_counts = np.maximum(1, np.round(num_clones * (1 / (1 + fitness * fitness_penalty))).astype(int))

        # Generate clones
        clones = np.repeat(antibodies, clone_counts, axis=0)

        # Apply mutation
        mutation_mask = np.random.rand(*clones.shape) < mutation_rate
        mutation_amounts = np.random.uniform(-0.5, 0.5, size=clones.shape) * (search_space[:, 1] - search_space[:, 0])
        mutated_clones = np.clip(clones + mutation_mask * mutation_amounts, search_space[:, 0], search_space[:, 1])

        # Combine original and mutated clones
        combined_population = np.vstack((antibodies, mutated_clones))
        fitness_combined = np.array([objective_function(antibody) for antibody in combined_population])

        # Select best individuals for next generation
        antibodies = combined_population[np.argsort(fitness_combined)][:num_antibodies]

        # Log best fitness for monitoring
        print(f"Generation {generation+1}: Best Fitness = {np.min(fitness_combined):.6f}")

    return antibodies[0]

# Example usage
if __name__ == "__main__":
    best_solution = clonal_selection_algorithm(
        num_antibodies=50,
        num_dimensions=3,
        search_space=np.array([[-5, 5]] * 3),
        num_generations=20,
        num_clones=10,
        fitness_penalty=0.1,
        mutation_rate=0.1
    )

    print("\nBest Solution:", best_solution)
    print("Objective Value:", objective_function(best_solution))