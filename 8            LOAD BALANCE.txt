import numpy as np
import random

# Define servers
servers = "SERVER-A SERVER-B SERVER-C SERVER-D".split()
print(f"Available servers: {servers}")

# Define LoadBalancer class
class LoadBalancer:
    def __init__(self, servers):
        self.servers = servers
        
    def random_selection(self):
        return random.choice(self.servers)
    
    def numpy_random_selection(self):
        return np.random.choice(self.servers)

# Define simulation function
def simulate_client_requests(load_balancer, num_requests):
    for i in range(num_requests):
        # Using Random algorithm for load balancing
        server_random = load_balancer.random_selection()
        server_numpy = load_balancer.numpy_random_selection()
        print(f"Request {i+1}: Random - {server_random}, NumPy - {server_numpy}")

# Create LoadBalancer instance
lb = LoadBalancer(servers)

# Simulate client requests
print("\nSimulating client requests:")
simulate_client_requests(lb, 10)
